
tempforgetdep ();


normevalsubs := proc ()

normal ( eval ( value ( subs ( args ) ) ) );

end;

#
# berechnet eine Konstante cn aus einem charakterisischen Polynom
# v * ( v - s ) * ( v - s * cn ) = v * ( v^2 + p * v + q )
#
# nach den Formeln :
#
# p = - s ( 1 + cn ), q = s^2 * cn, also
# p^2/q = ( 1+cn)^2/cn^2
#
#


computeConstant3 := proc ( cpe, v, cn )

local cp1,
		cnst,
		p, q,
		loes;

global _rcgcnstnts;

cp1 := collect ( normal ( cpe / v ), v );

cp1 := pmakemonic ( cp1, v );

p := coeff ( cp1, v, 1 );

q := coeff ( cp1, v, 0 );

loes := solve ( (1+cnst)^2/cnst = p^2/q, cnst );

# loes := select ( xx->abs(xx) >= 1, [loes] );

if nops ( [loes] ) > 1 then

	loes := [loes[1]];
	
fi;

_rcgcnstnts := [ cn = op(loes) ];

end;

#
#
#

cleardenom := proc ( e, v )

evalb ( not has ( denom ( normal ( e ) ), v ) );

end;


recog3 := proc ( jb, fs )

local xi, eta, x, y, XXI, EETA,
		fss, varsfs,
		slvars, slfuns,
		jb1, jbtype, jbpatt,
		fff,
		rels,
		cond,
		l1bed,
		cond2, cond3,
		lbed2, lbed3, lbed1,
		res,
		cpe,
		test13,
		ff,
		cpe1,
		CC,
		kf,
		dt,
		test20ffff1t2,
		test20ffff1t3;


global _rcgcnstnts;
		
		
xi := XXI (x,y);
eta := EETA ( x, y);

fss := [xi, eta];

setcotes ( fss, totDegOrder ( fss ) );

varsfs := [op(fs[1])];

slvars := [varsfs[1]=x, varsfs[2] = y];

slfuns := [fs[1]=xi, fs[2]=eta];


jb1 := subs ( slvars, subs ( slfuns, jb ) );

jb1 := sortdiffs ( jb1, [xi, eta] );


jbtype := map ( dlterm, jb1, [xi, eta] );



jbpatt := makejbpattern ( jbtype, [xi, eta], withargs, prefix=`RCGI` );


fff := subs (T = [xi,eta], (xx,yy)-> dmatch ( xx,yy,T ) );


rels := zip ( fff, jbpatt, jb1 );

rels := map ( x->x[2..-1], rels );

rels := flatten1 ( rels );

##################### include if-list after this line

if jbtype = [diff(diff(diff(eta,x),x),x), diff(eta,y), xi] then 

    cond := [-RCGIb[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGIb[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `3_8_ftff`

            print ( `3_8_ftff` );

            res := [3, 8, ftff];

        fi;

    else

        cond2 := [RCGIb[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `3_15_ftff`

            print ( `3_15_ftff` );

            res := [3, 15, ftff];

        fi;

    fi;

elif jbtype = [diff(diff(diff(eta,y),y),y), diff(eta,x), xi] then 

    cond := [false]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := []; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `3_8_fttf`

            print ( `3_8_fttf` );

            res := [3, 8, fttf];

        fi;

    fi;

elif jbtype = [diff(diff(diff(xi,x),x),x), diff(xi,y), eta] then 

    cond := [1+RCGIc[1](x,y)*RCGIb[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [(-1+RCGIc[1](x,y)*RCGIb[1](x,y))^2+4*RCGIc[1](x,y)*RCGIb[1](x,y) <> 0]; 

        cond3 := [-RCGIb[1](x,y) = 0, -1+RCGIc[1](x,y)*RCGIb[1](x,y) = 0, RCGIc[1](x,y) = 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `3_8_ffff`

            print ( `3_8_ffff` );

            res := [3, 8, ffff];

        fi;

    else

        cond2 := [(-1+RCGIc[1](x,y)*RCGIb[1](x,y))^2+4*RCGIc[1](x,y)*RCGIb[1](x,y) <> 0]; 

        cond3 := [-RCGIb[1](x,y) = 0, -1+RCGIc[1](x,y)*RCGIb[1](x,y) = 0, RCGIc[1](x,y) = 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `3_15_ffff`

            print ( `3_15_ffff` );

            res := [3, 15, ffff];

        fi;

    fi;

elif jbtype = [diff(diff(diff(xi,y),y),y), diff(xi,x), eta] then 

    cond := [-RCGIc[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGIc[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `3_8_fftf`

            print ( `3_8_fftf` );

            res := [3, 8, fftf];

        fi;

    else

        cond2 := [RCGIc[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `3_15_tfff`

            print ( `3_15_tfff` );

            res := [3, 15, tfff];

        fi;

    fi;

elif jbtype = [diff(diff(eta,x),x), diff(eta,y), diff(xi,y), diff(xi,x)] then 

    cond := [-RCGIb[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGIb[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `3_5_ftff`

            print ( `3_5_ftff` );

            res := [3, 5, ftff];

        fi;

    else

        cond2 := [RCGIb[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # need characteristic polynomial to distinguish cases

            cpe := lambda^3+((RCGId[2](x,y)+RCGIa[1](x,y)-2*RCGIb[3](x,y))*t[1]-

            t[2]*RCGIb[1](x,y)+(diff(RCGIb[1](x,y),x)+RCGIc[2](x,y)-RCGIb[1](x,y)

            *RCGIa[1](x,y))*t[3])*lambda^2+((-diff(RCGIb[3](x,y),x)+RCGIb[1](x,y)

            *RCGIa[3](x,y)-RCGIa[1](x,y)*RCGIb[3](x,y)+RCGIa[2](x,y)+RCGIb[3](x,y)

            ^2)*t[1]^2+((RCGIc[2](x,y)-diff(RCGIb[1](x,y),x)-2*RCGId[1](x,y)

            +RCGIb[3](x,y)*RCGIb[1](x,y)-RCGId[2](x,y)*RCGIb[1](x,y))*t[2]+

            (RCGIc[2](x,y)*RCGId[2](x,y)-RCGIc[2](x,y)*RCGIb[3](x,y)-RCGId[1](x,y)

            *RCGIa[1](x,y)-RCGId[1](x,y)*RCGId[2](x,y)-RCGIb[1](x,y)*RCGIb[3](x,y)

            *RCGId[2](x,y)-diff(RCGIb[1](x,y),x)*RCGIb[3](x,y)+RCGIb[1](x,y)

            *diff(RCGIb[3](x,y),x)-RCGIb[1](x,y)*RCGIa[2](x,y)-RCGIb[1](x,y)

            ^2*RCGIa[3](x,y)+RCGIb[1](x,y)*RCGIa[1](x,y)*RCGIb[3](x,y)+RCGIc[2](x,y)

            *RCGIa[1](x,y))*t[3])*t[1]+(RCGId[1](x,y)*RCGIb[1](x,y)-RCGIc[2](x,y)

            *RCGIb[1](x,y))*t[3]*t[2]+(-RCGId[1](x,y)^2-RCGId[1](x,y)*diff(RCGIb[1](x,y)

            ,x)-RCGIc[2](x,y)*RCGIb[1](x,y)*RCGIa[1](x,y)+RCGIc[2](x,y)*

            RCGId[1](x,y)+RCGIc[2](x,y)*diff(RCGIb[1](x,y),x)+RCGId[1](x,y)

            *RCGIb[1](x,y)*RCGIa[1](x,y))*t[3]^2)*lambda

            ;

            # end characteristic polynomial

			test13 := coeff ( coeff ( coeff ( cpe, lambda ), t[1] ), t[2] );
			
			test13 := normevalsubs ( rels, test13 );
			
			if test13 = 0 then

				ff := subs ( RELS = rels, (xx)->normevalsubs ( RELS, xx ) );
			
				cpe1 := collect ( cpe, lambda, ff );
				
				if cpe1 = lambda^3 then


            		# Gruppe `3_17_4_ftff`

            		print ( `3_17_4_ftff` );

            		res := [3, 17, 4, ftff];

				elif cleardenom ( cpe1 / lambda^2, lambda ) then
				

            		# Gruppe `3_17_3_ftff`

            		print ( `3_17_3_ftff` );

            		res := [3, 17, 3, ftff];

				elif discrim ( normal(cpe1/lambda), lambda ) = 0 then

            		# Gruppe `3_17_2_ftff`

            		print ( `3_17_2_ftff` );

            		res := [3, 17, 2, ftff];

				else

            		# Gruppe `3_17_1_ftff`

            		print ( `3_17_1_ftff` );

					computeConstant3( cpe1, lambda, a );

            		res := [3, 17, 1, ftff];

				fi;

			else
		
            	# Gruppe `3_13_ftff`

            	print ( `3_13_ftff` );

            	res := [3, 13, ftff];

			fi;


        fi;

    fi;

elif jbtype = [diff(diff(eta,y),y), diff(diff(eta,x),y), diff(diff(eta,x),x), xi] then 

    cond := [false]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [false]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `3_16_ftff`

            print ( `3_16_ftff` );

            res := [3, 16, ftff];

        fi;

    fi;

elif jbtype = [diff(diff(eta,y),y), diff(eta,x), diff(xi,y), diff(xi,x)] then 

    cond := [false]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := []; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `3_5_fttf`

            print ( `3_5_fttf` );

            res := [3, 5, fttf];

        fi;

    fi;

elif jbtype = [diff(diff(xi,x),x), diff(eta,y), diff(eta,x), diff(xi,y)] then 

    cond := [1-RCGIb[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [(-1-RCGIb[1](x,y))^2+4*RCGId[1](x,y)*RCGIc[1](x,y) <> 0]; 

        cond3 := [-RCGId[1](x,y) = 0, -1-RCGIb[1](x,y) = 0, RCGIc[1](x,y) = 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `3_20_ffff`

            print ( `3_20_ffff` );

            res := [3, 20, ffff];

        elif lbed2 then

            # need characteristic polynomial to distinguish cases

            cpe := lambda^3+((1-RCGIb[1](x,y))*t[1]+(RCGIa[1](x,y)-RCGId[1](x,y)

            *RCGIc[3](x,y)+RCGIc[1](x,y)*RCGId[3](x,y)-RCGIb[3](x,y)+RCGIc[2](x,y)

            )*t[2]+(2*RCGId[3](x,y)+diff(RCGId[1](x,y),x)-RCGId[1](x,y)*

            RCGIc[2](x,y)-RCGId[1](x,y)*RCGIa[1](x,y))*t[3])*lambda^2+((-

            RCGIb[1](x,y)-RCGId[1](x,y)*RCGIc[1](x,y))*t[1]^2+((RCGId[1](x,y)

            *RCGIc[3](x,y)*RCGIb[1](x,y)+diff(RCGId[1](x,y),x)*RCGIc[1](x,y)

            -RCGIb[3](x,y)+RCGIc[2](x,y)-RCGId[1](x,y)*RCGIc[2](x,y)*RCGIc[1](x,y)

            -RCGIc[1](x,y)*RCGId[3](x,y)*RCGIb[1](x,y)-RCGIa[1](x,y)*RCGIb[1](x,y)

            -RCGId[1](x,y)*RCGIa[1](x,y)*RCGIc[1](x,y))*t[2]+(RCGIb[3](x,y)

            *RCGId[1](x,y)-2*RCGId[1](x,y)*RCGIc[2](x,y)+RCGId[3](x,y)+diff(RCGId[1](x,y)

            ,x)+RCGIc[1](x,y)*RCGId[3](x,y)*RCGId[1](x,y)-RCGId[1](x,y)^2*

            RCGIc[3](x,y)-RCGId[3](x,y)*RCGIb[1](x,y))*t[3])*t[1]+(RCGIc[2](x,y)

            *RCGIa[1](x,y)-RCGId[1](x,y)*RCGIa[3](x,y)*RCGIc[1](x,y)-RCGIc[1](x,y)

            *RCGId[3](x,y)*RCGIb[3](x,y)-RCGIa[2](x,y)*RCGIc[1](x,y)+RCGId[1](x,y)

            *RCGIc[3](x,y)*RCGIb[3](x,y)-RCGId[1](x,y)*RCGIc[3](x,y)*RCGIc[2](x,y)

            -RCGIa[1](x,y)*RCGIb[3](x,y)+diff(RCGId[3](x,y),x)*RCGIc[1](x,y)

            )*t[2]^2+(-RCGId[3](x,y)*RCGIb[3](x,y)-RCGIa[2](x,y)-RCGIa[2](x,y)

            *RCGIb[1](x,y)+diff(RCGId[1](x,y),x)*RCGIc[2](x,y)-RCGId[3](x,y)

            *RCGIc[2](x,y)*RCGIb[1](x,y)+diff(RCGId[3](x,y),x)*RCGIb[1](x,y)

            -RCGId[1](x,y)*RCGIa[3](x,y)*RCGIb[1](x,y)-RCGId[1](x,y)*RCGIc[2](x,y)

            ^2+diff(RCGId[3](x,y),x)-RCGId[1](x,y)*RCGIa[3](x,y)+RCGIa[1](x,y)

            *RCGId[3](x,y)-diff(RCGId[1](x,y),x)*RCGIb[3](x,y)-RCGId[1](x,y)

            *RCGIa[1](x,y)*RCGIc[2](x,y)+RCGId[1](x,y)*RCGIc[2](x,y)*RCGIb[3](x,y)

            +RCGId[1](x,y)*RCGIa[1](x,y)*RCGIb[3](x,y)+RCGIc[1](x,y)*RCGId[3](x,y)

            ^2-RCGId[1](x,y)*RCGIc[3](x,y)*RCGId[3](x,y))*t[3]*t[2]+(RCGId[3](x,y)

            ^2-diff(RCGId[3](x,y),x)*RCGId[1](x,y)-RCGId[1](x,y)*RCGIa[1](x,y)

            *RCGId[3](x,y)+RCGId[1](x,y)^2*RCGIa[3](x,y)+diff(RCGId[1](x,y)

            ,x)*RCGId[3](x,y)+RCGIa[2](x,y)*RCGId[1](x,y))*t[3]^2)*lambda

            ;

            # end characteristic polynomial

			ff := subs ( RELS=rels, (xx)->normevalsubs ( RELS, xx ) );

			cpe1 := collect ( cpe, lambda, ff );
			
			if not cleardenom ( cpe1/lambda^2, lambda ) then

            	# Gruppe `3_7_ffff`

            	print ( `3_7_ffff` );

				computeConstant3 ( cpe1, lambda, c );

            	res := [3, 7, ffff];

			else

            	# Gruppe `3_5_ffff`

            	print ( `3_5_ffff` );

            	res := [3, 5, ffff];

			fi;

        elif lbed3 then

            # Gruppe `3_24_ffff`

            print ( `3_24_ffff` );

            res := [3, 24, ffff];

        fi;

    else

        cond2 := [(-1-RCGIb[1](x,y))^2+4*RCGId[1](x,y)*RCGIc[1](x,y) <> 0]; 

        cond3 := [-RCGId[1](x,y) = 0, -1-RCGIb[1](x,y) = 0, RCGIc[1](x,y) = 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # need characteristic polynomial to distinguish cases

            cpe := lambda^3+((1-RCGIb[1](x,y))*t[1]+(RCGIa[1](x,y)-RCGId[1](x,y)

            *RCGIc[3](x,y)+RCGIc[1](x,y)*RCGId[3](x,y)-RCGIb[3](x,y)+RCGIc[2](x,y)

            )*t[2]+(2*RCGId[3](x,y)+diff(RCGId[1](x,y),x)-RCGId[1](x,y)*

            RCGIc[2](x,y)-RCGId[1](x,y)*RCGIa[1](x,y))*t[3])*lambda^2+((-

            RCGIb[1](x,y)-RCGId[1](x,y)*RCGIc[1](x,y))*t[1]^2+((RCGId[1](x,y)

            *RCGIc[3](x,y)*RCGIb[1](x,y)+diff(RCGId[1](x,y),x)*RCGIc[1](x,y)

            -RCGIb[3](x,y)+RCGIc[2](x,y)-RCGId[1](x,y)*RCGIc[2](x,y)*RCGIc[1](x,y)

            -RCGIc[1](x,y)*RCGId[3](x,y)*RCGIb[1](x,y)-RCGIa[1](x,y)*RCGIb[1](x,y)

            -RCGId[1](x,y)*RCGIa[1](x,y)*RCGIc[1](x,y))*t[2]+(RCGIb[3](x,y)

            *RCGId[1](x,y)-2*RCGId[1](x,y)*RCGIc[2](x,y)+RCGId[3](x,y)+diff(RCGId[1](x,y)

            ,x)+RCGIc[1](x,y)*RCGId[3](x,y)*RCGId[1](x,y)-RCGId[1](x,y)^2*

            RCGIc[3](x,y)-RCGId[3](x,y)*RCGIb[1](x,y))*t[3])*t[1]+(RCGIc[2](x,y)

            *RCGIa[1](x,y)-RCGId[1](x,y)*RCGIa[3](x,y)*RCGIc[1](x,y)-RCGIc[1](x,y)

            *RCGId[3](x,y)*RCGIb[3](x,y)-RCGIa[2](x,y)*RCGIc[1](x,y)+RCGId[1](x,y)

            *RCGIc[3](x,y)*RCGIb[3](x,y)-RCGId[1](x,y)*RCGIc[3](x,y)*RCGIc[2](x,y)

            -RCGIa[1](x,y)*RCGIb[3](x,y)+diff(RCGId[3](x,y),x)*RCGIc[1](x,y)

            )*t[2]^2+(-RCGId[3](x,y)*RCGIb[3](x,y)-RCGIa[2](x,y)-RCGIa[2](x,y)

            *RCGIb[1](x,y)+diff(RCGId[1](x,y),x)*RCGIc[2](x,y)-RCGId[3](x,y)

            *RCGIc[2](x,y)*RCGIb[1](x,y)+diff(RCGId[3](x,y),x)*RCGIb[1](x,y)

            -RCGId[1](x,y)*RCGIa[3](x,y)*RCGIb[1](x,y)-RCGId[1](x,y)*RCGIc[2](x,y)

            ^2+diff(RCGId[3](x,y),x)-RCGId[1](x,y)*RCGIa[3](x,y)+RCGIa[1](x,y)

            *RCGId[3](x,y)-diff(RCGId[1](x,y),x)*RCGIb[3](x,y)-RCGId[1](x,y)

            *RCGIa[1](x,y)*RCGIc[2](x,y)+RCGId[1](x,y)*RCGIc[2](x,y)*RCGIb[3](x,y)

            +RCGId[1](x,y)*RCGIa[1](x,y)*RCGIb[3](x,y)+RCGIc[1](x,y)*RCGId[3](x,y)

            ^2-RCGId[1](x,y)*RCGIc[3](x,y)*RCGId[3](x,y))*t[3]*t[2]+(RCGId[3](x,y)

            ^2-diff(RCGId[3](x,y),x)*RCGId[1](x,y)-RCGId[1](x,y)*RCGIa[1](x,y)

            *RCGId[3](x,y)+RCGId[1](x,y)^2*RCGIa[3](x,y)+diff(RCGId[1](x,y)

            ,x)*RCGId[3](x,y)+RCGIa[2](x,y)*RCGId[1](x,y))*t[3]^2)*lambda

            ;

            # end characteristic polynomial

			test13 := coeff ( coeff ( coeff ( cpe, lambda ), t[1] ), t[2] );
			
			test13 := normevalsubs ( rels, test13 );
			
			if test13 = 0 then

				ff := subs ( RELS = rels, (xx)->normevalsubs ( RELS, xx ) );
			
				cpe1 := collect ( cpe, lambda, ff );
				
				if cpe1 = lambda^3 then

            		# Gruppe `3_17_4_ffff`

            		print ( `3_17_4_ffff` );

            		res := [3, 17, 4, ffff];

				elif cleardenom ( cpe1 / lambda^2, lambda ) then
				
            		# Gruppe `3_17_3_ffff`

            		print ( `3_17_3_ffff` );

            		res := [3, 17, 3, ffff];

				elif discrim ( normal(cpe1/lambda), lambda ) = 0 then

            		# Gruppe `3_17_2_ffff`

            		print ( `3_17_2_ffff` );

            		res := [3, 17, 2, ffff];

				else

            		# Gruppe `3_17_1_ffff`

            		print ( `3_17_1_ffff` );

					computeConstant3 ( cpe1, lambda, a );

            		res := [3, 17, 1, ffff];

				fi;

			else
		
            	# Gruppe `3_13_ffff`

            	print ( `3_13_ffff` );

            	res := [3, 13, ffff];

			fi;

        elif lbed2 then

            # Gruppe `3_10_ffff`

			print ( `compute Killingform for decision between 3_7_ffff, c=-1 and 3_10_ffff` );

			CC := dstructConst ( jb, fs );
			
			kf := map( normal, killform ( eval ( CC ), 3 ) );
			
			dt := linalg[det] ( kf );

			if dt <> 0 then

	            print ( `3_10_ffff` );

    	        res := [3, 10, ffff];

			else
			
				print ( `3_7_ffff, c=-1` );
				
				_rcgcnstnts := [c=-1];
				
				res := [[3,7,ffff],[c = -1]];
				
			fi;

        fi;

    fi;

elif jbtype = [diff(diff(xi,y),y), diff(eta,y), diff(eta,x), diff(xi,x)] then 

    cond := [-RCGIb[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGIb[1](x,y)^2-4*RCGIc[1](x,y) <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # need characteristic polynomial to distinguish cases

            cpe := lambda^3+(-t[1]*RCGIb[1](x,y)+(RCGIc[2](x,y)-RCGId[1](x,y)*RCGIb[1](x,y)

            )*t[2]+(RCGIb[2](x,y)-2*RCGId[1](x,y)+RCGIa[1](x,y))*t[3])*lambda^2+

            (t[1]^2*RCGIc[1](x,y)+((RCGIa[1](x,y)*RCGIc[1](x,y)+RCGIb[2](x,y)

            *RCGIc[1](x,y)-RCGIb[3](x,y)*RCGIb[1](x,y)+RCGId[1](x,y)*RCGIb[1](x,y)

            ^2)*t[2]+(2*RCGId[1](x,y)*RCGIb[1](x,y)+RCGIc[2](x,y)-2*RCGIb[3](x,y)

            )*t[3])*t[1]+(RCGId[1](x,y)*RCGIb[2](x,y)*RCGIc[1](x,y)+RCGIa[3](x,y)

            *RCGIc[1](x,y)-RCGIb[3](x,y)^2-diff(RCGId[1](x,y),y)*RCGIc[1](x,y)

            +RCGId[1](x,y)*RCGIb[1](x,y)*RCGIb[3](x,y)-RCGId[1](x,y)*RCGIb[1](x,y)

            *RCGIc[2](x,y)+RCGIb[3](x,y)*RCGIc[2](x,y))*t[2]^2+(RCGId[1](x,y)

            *RCGIb[2](x,y)*RCGIb[1](x,y)+RCGIc[2](x,y)*RCGIa[1](x,y)-RCGIb[2](x,y)

            *RCGIb[3](x,y)-diff(RCGId[1](x,y),y)*RCGIb[1](x,y)+RCGIb[2](x,y)

            *RCGIc[2](x,y)-RCGId[1](x,y)*RCGIc[2](x,y)-RCGIa[1](x,y)*RCGIb[3](x,y)

            +RCGId[1](x,y)^2*RCGIb[1](x,y)+RCGIa[3](x,y)*RCGIb[1](x,y))*

            t[3]*t[2]+(-diff(RCGId[1](x,y),y)-RCGId[1](x,y)*RCGIa[1](x,y)

            +RCGId[1](x,y)^2+RCGIa[3](x,y))*t[3]^2)*lambda

            ;

            # end characteristic polynomial

			test20ffff1t2 := coeff ( coeff ( cpe, lambda ), t[2], 2 );
			test20ffff1t3 := coeff ( coeff ( cpe, lambda ), t[3], 2 );

			test20ffff1t2 := normevalsubs ( rels, test20ffff1t2 );
			test20ffff1t3 := normevalsubs ( rels, test20ffff1t3 );

			# die folgende Trennung ist unmoeglich und muss beseitigt werden
			# (auskommmentiert)
			

#			if test20ffff1t2 = 0 and test20ffff1t3 = 0 then

            	# Gruppe `3_20_fftf_1`

            	print ( `3_20_fftf_1` );

            	res := [3, 20, fftf, 1];

            	# Gruppe `3_20_ffft_1`

            	print ( `3_20_ffft_1` );

            	res := [op(res), [3, 20, ffft, 1]];

#			else

            	# Gruppe `3_20_ffff_1`

            	print ( `3_20_ffff_1` );

            	res := [3, 20, ffff, 1];

#			fi;


        elif lbed2 then

            # need characteristic polynomial to distinguish cases

            cpe := lambda^3+(-t[1]*RCGIb[1](x,y)+(RCGIc[2](x,y)-RCGId[1](x,y)*RCGIb[1](x,y)

            )*t[2]+(RCGIb[2](x,y)-2*RCGId[1](x,y)+RCGIa[1](x,y))*t[3])*lambda^2+

            (t[1]^2*RCGIc[1](x,y)+((RCGIa[1](x,y)*RCGIc[1](x,y)+RCGIb[2](x,y)

            *RCGIc[1](x,y)-RCGIb[3](x,y)*RCGIb[1](x,y)+RCGId[1](x,y)*RCGIb[1](x,y)

            ^2)*t[2]+(2*RCGId[1](x,y)*RCGIb[1](x,y)+RCGIc[2](x,y)-2*RCGIb[3](x,y)

            )*t[3])*t[1]+(RCGId[1](x,y)*RCGIb[2](x,y)*RCGIc[1](x,y)+RCGIa[3](x,y)

            *RCGIc[1](x,y)-RCGIb[3](x,y)^2-diff(RCGId[1](x,y),y)*RCGIc[1](x,y)

            +RCGId[1](x,y)*RCGIb[1](x,y)*RCGIb[3](x,y)-RCGId[1](x,y)*RCGIb[1](x,y)

            *RCGIc[2](x,y)+RCGIb[3](x,y)*RCGIc[2](x,y))*t[2]^2+(RCGId[1](x,y)

            *RCGIb[2](x,y)*RCGIb[1](x,y)+RCGIc[2](x,y)*RCGIa[1](x,y)-RCGIb[2](x,y)

            *RCGIb[3](x,y)-diff(RCGId[1](x,y),y)*RCGIb[1](x,y)+RCGIb[2](x,y)

            *RCGIc[2](x,y)-RCGId[1](x,y)*RCGIc[2](x,y)-RCGIa[1](x,y)*RCGIb[3](x,y)

            +RCGId[1](x,y)^2*RCGIb[1](x,y)+RCGIa[3](x,y)*RCGIb[1](x,y))*

            t[3]*t[2]+(-diff(RCGId[1](x,y),y)-RCGId[1](x,y)*RCGIa[1](x,y)

            +RCGId[1](x,y)^2+RCGIa[3](x,y))*t[3]^2)*lambda

            ;

            # end characteristic polynomial

			ff := subs ( RELS = rels, (xx)->normevalsubs ( RELS, xx ) );
			
			cpe1 := collect ( cpe, lambda, ff );
			
			if not cleardenom ( cpe1 / lambda^2, lambda ) then

            	# Gruppe `3_7_ffff_1`

            	print ( `3_7_ffff_1` );

				computeConstant3 ( cpe1, lambda, c );

            	res := [3, 7, ffff, 1];

			else
			
            	# Gruppe `3_5_fftf`

            	print ( `3_5_fftf` );

            	res := [3, 5, fftf];

			fi;

        fi;

    else

        cond2 := [RCGIb[1](x,y)^2-4*RCGIc[1](x,y) <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # need characteristic polynomial to distinguish cases

            cpe := lambda^3+(-t[1]*RCGIb[1](x,y)+(RCGIc[2](x,y)-RCGId[1](x,y)*RCGIb[1](x,y)

            )*t[2]+(RCGIb[2](x,y)-2*RCGId[1](x,y)+RCGIa[1](x,y))*t[3])*lambda^2+

            (t[1]^2*RCGIc[1](x,y)+((RCGIa[1](x,y)*RCGIc[1](x,y)+RCGIb[2](x,y)

            *RCGIc[1](x,y)-RCGIb[3](x,y)*RCGIb[1](x,y)+RCGId[1](x,y)*RCGIb[1](x,y)

            ^2)*t[2]+(2*RCGId[1](x,y)*RCGIb[1](x,y)+RCGIc[2](x,y)-2*RCGIb[3](x,y)

            )*t[3])*t[1]+(RCGId[1](x,y)*RCGIb[2](x,y)*RCGIc[1](x,y)+RCGIa[3](x,y)

            *RCGIc[1](x,y)-RCGIb[3](x,y)^2-diff(RCGId[1](x,y),y)*RCGIc[1](x,y)

            +RCGId[1](x,y)*RCGIb[1](x,y)*RCGIb[3](x,y)-RCGId[1](x,y)*RCGIb[1](x,y)

            *RCGIc[2](x,y)+RCGIb[3](x,y)*RCGIc[2](x,y))*t[2]^2+(RCGId[1](x,y)

            *RCGIb[2](x,y)*RCGIb[1](x,y)+RCGIc[2](x,y)*RCGIa[1](x,y)-RCGIb[2](x,y)

            *RCGIb[3](x,y)-diff(RCGId[1](x,y),y)*RCGIb[1](x,y)+RCGIb[2](x,y)

            *RCGIc[2](x,y)-RCGId[1](x,y)*RCGIc[2](x,y)-RCGIa[1](x,y)*RCGIb[3](x,y)

            +RCGId[1](x,y)^2*RCGIb[1](x,y)+RCGIa[3](x,y)*RCGIb[1](x,y))*

            t[3]*t[2]+(-diff(RCGId[1](x,y),y)-RCGId[1](x,y)*RCGIa[1](x,y)

            +RCGId[1](x,y)^2+RCGIa[3](x,y))*t[3]^2)*lambda

            ;
			test13 := coeff ( coeff ( coeff ( cpe, lambda ), t[1] ), t[3] );
			
			test13 := normevalsubs ( rels, test13 );
			
			if test13 = 0 then

				ff := subs ( RELS = rels, (xx)->normevalsubs ( RELS, xx ) );
			
				cpe1 := collect ( cpe, lambda, ff );
				
				if cpe1 = lambda^3 then


            		# Gruppe `3_17_4_tfff`

            		print ( `3_17_4_tfff` );

            		res := [3, 17, 4, tfff];

				elif cleardenom ( cpe1 / lambda^2, lambda ) then
				

            		# Gruppe `3_17_3_tfff`

            		print ( `3_17_3_tfff` );

            		res := [3, 17, 3, tfff];

				elif discrim ( normal(cpe1/lambda), lambda ) = 0 then

            		# Gruppe `3_17_2_tfff`

            		print ( `3_17_2_tfff` );

            		res := [3, 17, 2, tfff];

				else

            		# Gruppe `3_17_1_tfff`

            		print ( `3_17_1_tfff` );

					computeConstant3 ( cpe1, lambda, a );
		
            		res := [3, 17, 1, tfff];

				fi;

			else
		
            	# Gruppe `3_13_tfff`

            	print ( `3_13_tfff` );

            	res := [3, 13, tfff];

			fi;

            # end characteristic polynomial


        elif lbed2 then

            # Gruppe `3_10_ffff_1`

			print ( `compute Killingform for decision between 3_7_ffff, c=-1 and 3_10_ffff` );

			CC := dstructConst ( jb, fs );
			
			kf := map( normal, killform ( eval ( CC ), 3 ) );
			
			dt := linalg[det] ( kf );
			
			if dt <> 0 then

	            print ( `3_10_ffff_1` );

    	        res := [3, 10, ffff, 1];

			else
			
				print ( `3_7_ffff_1, c=-1` );
				
				_rcgcnstnts := [c=-1];

				res := [[3,7,ffff,1],[c = -1]];
				
			fi;

        fi;

    fi;

elif jbtype = [diff(diff(xi,y),y), diff(diff(xi,x),y), diff(diff(xi,x),x), eta] then 

    cond := [false]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [false]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `3_16_ffff`

            print ( `3_16_ffff` );

            res := [3, 16, ffff];



#####################

		fi;

	fi;
	
fi;

remcotes ( fss );

if getliedim ( res ) = 3 and getlienr ( res ) = 17 
						and getsubtypnr ( res ) = 1 then

	if normevalval ( subs ( _rcgcnstnts, a+1 ) ) = 0 then
	
		res := [res, [a=-1]];
		
	fi;
	
fi;



RETURN ( res );

end:


restoredep ();

