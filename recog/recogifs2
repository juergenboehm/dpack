if jbtype = [diff(diff(eta,x),x), diff(eta,y), xi] then 

    cond := [-RCGIb[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGIb[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `2_4_ftff`

            print ( `2_4_ftff` );

            res := [2, 4, ftff];

        fi;

    else

        cond2 := [RCGIb[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `2_15_ftff`

            print ( `2_15_ftff` );

            res := [2, 15, ftff];

        fi;

    fi;

elif jbtype = [diff(diff(eta,y),y), diff(eta,x), xi] then 

    cond := [false]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := []; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `2_4_fttf`

            print ( `2_4_fttf` );

            res := [2, 4, fttf];

        fi;

    fi;

elif jbtype = [diff(diff(xi,x),x), diff(xi,y), eta] then 

    cond := [1+RCGIc[1](x,y)*RCGIb[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [(RCGIc[1](x,y)*RCGIb[1](x,y)-1)^2+4*RCGIc[1](x,y)*RCGIb[1](x,y) <> 0]; 

        cond3 := [-RCGIb[1](x,y) = 0, RCGIc[1](x,y)*RCGIb[1](x,y)-1 = 0, RCGIc[1](x,y) = 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `2_4_ffff`

            print ( `2_4_ffff` );

            res := [2, 4, ffff];

        fi;

    else

        cond2 := [(RCGIc[1](x,y)*RCGIb[1](x,y)-1)^2+4*RCGIc[1](x,y)*RCGIb[1](x,y) <> 0]; 

        cond3 := [-RCGIb[1](x,y) = 0, RCGIc[1](x,y)*RCGIb[1](x,y)-1 = 0, RCGIc[1](x,y) = 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `2_15_ffff`

            print ( `2_15_ffff` );

            res := [2, 15, ffff];

        fi;

    fi;

elif jbtype = [diff(diff(xi,y),y), diff(xi,x), eta] then 

    cond := [-RCGIc[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGIc[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed2 then

            # Gruppe `2_4_fftf`

            print ( `2_4_fftf` );

            res := [2, 4, fftf];

        fi;

    else

        cond2 := [RCGIc[1](x,y)^2 <> 0]; 

        cond3 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `2_15_tfff`

            print ( `2_15_tfff` );

            res := [2, 15, tfff];

        fi;

    fi;

elif jbtype = [diff(eta,y), diff(eta,x), diff(xi,y), diff(xi,x)] then 

    if true then

        cond2 := [false]; 

        cond3 := []; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed3 then

            # need characteristic polynomial to distinguish cases

            cpe := lambda^2+((RCGIb[1](x,y)-RCGIa[2](x,y))*t[1]+(-RCGId[1](x,y)+

            RCGIc[2](x,y))*t[2])*lambda

            ;

            # end characteristic polynomial

            # Gruppe `2_26_ffff`

            print ( `2_26_ffff` );

            res := [2, 26, ffff];

            # Gruppe `2_25_ffff`

            print ( `2_25_ffff` );

            res := [2, 25, ffff];

