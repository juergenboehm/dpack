
tempforgetdep ();


normevalsubs := proc ()

normal ( eval ( value ( subs ( args ) ) ) );

end;

#
#
#

disc31 := proc ( p, v )

local i, p0, p1, p2,
		rels;

rels:= [p0=coeff(p,v,0)];
rels:= [op(rels), p1=coeff(p,v,1)];
rels:= [op(rels), p2=coeff(p,v,2)];

normevalsubs ( rels, -18*p2*p0*p1-p2^2*p1^2+4*p1^3+27*p0^2+4*p0*p2^3 );

end;

#
#
#

rcgjbcharpoly := proc ( CC, n, sl )

local AA, cp,
		idtlist;

idtlist := subs ( sl, [seq(t[i],i=1..5)] );

AA := liecharmat ( CC, n, idtlist );

AA := map ( normal, subs ( sl, eval ( AA ) ) );

cp := linalg[charpoly](AA,lambda);

ff := subs ( TL = [seq(t[i],i=1..5)], zz->collect ( zz, TL ) );

cp := collect ( cp, lambda, ff );

end;

#
#
#

cleardenom := proc ( e, v )

evalb ( not has ( denom ( normal ( e ) ), v ) );

end;

#
#
#

recog5 := proc ( jb, fs )

local xi, eta, 
		fss, varsfs,
		slvars, slfuns,
		jb1, jbtype, jbpatt,
		fff,
		rels,
		cond, l1bed, cond2, cond3, cond21, cond22, lbed2, lbed21, lbed22, lbed3, lbed1,
		res, cpe, d31;		
		
xi := XXI (x,y);
eta := EETA ( x, y);

fss := [xi, eta];

setcotes ( fss, totDegOrder ( fss ) );

varsfs := [op(fs[1])];

slvars := [varsfs[1]=x, varsfs[2] = y];

slfuns := [fs[1]=xi, fs[2]=eta];


jb1 := subs ( slvars, subs ( slfuns, jb ) );

jb1 := sortdiffs ( jb1, [xi, eta] );


jbtype := map ( dlterm, jb1, [xi, eta] );



jbpatt := makejbpattern ( jbtype, [xi, eta], withargs, prefix=`RCGI` );

fff := subs (T = [xi,eta], (xx,yy)-> dmatch ( xx,yy,T ) );


rels := zip ( fff, jbpatt, jb1 );

rels := map ( x->x[2..-1], rels );

rels := flatten1 ( rels );


##################### include if-list after this line

if jbtype = [diff(diff(diff(eta,x),x),x), diff(diff(xi,x),x), diff(eta,y), diff(xi,y)] then 

    cond := [1-RCGIc[2](x,y) = 0, -RCGIc[1](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [(-RCGIc[2](x,y)-1)^2 <> 0, RCGIc[1](x,y)^2 <> 0, RCGId[1](x,y)*RCGIc[1](x,y) = 0, RCGId[1](x,y) = 0, RCGIc[2](x,y)+1 = 0]; 

        cond3 := [false]; 

        cond21 := [-RCGId[1](x,y) = 0, -RCGIc[2](x,y)-1 = 0, RCGIc[1](x,y)^2 <> 0]; 

        cond22 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed21 := normevalsubs ( rels, cond21 );

        lbed22 := normevalsubs ( rels, cond22 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed21 := evalb ( convert ( lbed21, `and` ) );

        lbed22 := evalb ( convert ( lbed22, `and` ) );

        lbed2 := evalb ( lbed2 or lbed21 or lbed22 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # Gruppe `5_19_ftff_c_e_3`

            print ( `5_19_ftff_c_e_3` );

            res := [[5, 19, ftff], [c = 3]];

        fi;

    fi;

elif jbtype = [diff(diff(diff(eta,x),x),x), diff(diff(eta,y),y), diff(diff(eta,x),y), diff(xi,y), diff(xi,x)] then 

    cond := [false]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [false]; 

        cond3 := [false]; 

        cond21 := [false]; 

        cond22 := [false]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed21 := normevalsubs ( rels, cond21 );

        lbed22 := normevalsubs ( rels, cond22 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed21 := evalb ( convert ( lbed21, `and` ) );

        lbed22 := evalb ( convert ( lbed22, `and` ) );

        lbed2 := evalb ( lbed2 or lbed21 or lbed22 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # need characteristic polynomial to distinguish cases

			cpe := 
			
        lambda^5+((RCGIa[1](x,y)+RCGIc[2](x,y)+3*RCGIe[2](x,y))*lambda^4+

        ((-3*RCGIc[5](x,y)+RCGIa[3](x,y)+3*RCGIe[2](x,y)*RCGIc[2](x,y)

      +RCGIe[2](x,y)^2+diff(RCGIe[2](x,y),x)+(RCGIe[2](x,y)+RCGIc[2](x,y)

  )*RCGIa[1](x,y)-RCGIc[1](x,y)*RCGIa[2](x,y))*lambda^3+((-diff(RCGIc[5](x,y)

    ,x)-RCGIc[5](x,y)*RCGIe[2](x,y)+(diff(RCGIe[2](x,y),x)-2*RCGIc[5](x,y)

         +RCGIe[2](x,y)^2+RCGIa[3](x,y))*RCGIc[2](x,y)+(-RCGIc[3](x,y)

   -RCGId[2](x,y))*RCGIa[2](x,y)+(RCGIe[2](x,y)*RCGIc[2](x,y)-RCGIc[5](x,y)

    )*RCGIa[1](x,y)+RCGIa[4](x,y)-RCGIa[2](x,y)*RCGIc[1](x,y)*RCGIe[2](x,y)

         +RCGIc[1](x,y)*RCGIa[5](x,y))*lambda^2+((-diff(RCGIc[5](x,y)

         ,x)-RCGIc[5](x,y)*RCGIe[2](x,y)+RCGIc[2](x,y)*RCGIc[5](x,y))

   *RCGIc[2](x,y)+(RCGIb[5](x,y)-RCGIc[4](x,y))*RCGIa[2](x,y)-RCGIa[1](x,y)

    *RCGIc[2](x,y)*RCGIc[5](x,y)+RCGIa[4](x,y)*RCGIc[2](x,y)+RCGIa[2](x,y)

    *RCGIc[1](x,y)*RCGIc[5](x,y)+RCGIc[1](x,y)*RCGIa[5](x,y)*RCGIc[2](x,y)

                        )*lambda*t[1])*t[1])*t[1])*t[1]

                                    




			;

			cpe := collect ( normevalsubs ( rels, cpe ), lambda, normal );

            # end characteristic polynomial

			cpe := normal ( cpe/ lambda^2 );

			d31 := discrim ( cpe, lambda );

			if d31 = 0 then

            	# Gruppe `5_18_2_ftff`

            	print ( `5_18_2_ftff` );

            	res := [5, 18, 2, ftff];

			else

            	# Gruppe `5_18_1_ftff`

            	print ( `5_18_1_ftff` );

            	res := [5, 18, 1, ftff];

			fi;

        fi;

    fi;

elif jbtype = [diff(diff(diff(xi,x),x),x), diff(diff(xi,y),y), diff(diff(xi,x),y), diff(eta,y), diff(eta,x)] then 

    cond := [-RCGId[1](x,y) = 0, 1-RCGId[2](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGId[1](x,y)^2-4*RCGIe[1](x,y) <> 0, (-1-RCGId[2](x,y))^2 <> 0, -1-RCGId[2](x,y) = 0, RCGIe[2](x,y) = 0, -RCGId[1](x,y)*RCGIe[2](x,y)-(-1-RCGId[2](x,y))*RCGIe[1](x,y) = 0]; 

        cond3 := [false]; 

        cond21 := [false]; 

        cond22 := [-1-RCGId[2](x,y) = 0, RCGIe[2](x,y) = 0, RCGId[1](x,y)^2-4*RCGIe[1](x,y) <> 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed21 := normevalsubs ( rels, cond21 );

        lbed22 := normevalsubs ( rels, cond22 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed21 := evalb ( convert ( lbed21, `and` ) );

        lbed22 := evalb ( convert ( lbed22, `and` ) );

        lbed2 := evalb ( lbed2 or lbed21 or lbed22 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # need characteristic polynomial to distinguish cases

			cpe := 
			
			
			         lambda^5+((-2*RCGIc[1](x,y)*RCGIe[2](x,y)+1)*lambda^4+((-1+(-

         1-RCGId[2](x,y))*RCGId[2](x,y)-4*RCGIc[1](x,y)*RCGIe[2](x,y)

      )*lambda^3+((-1+(-2*RCGIc[1](x,y)+(2*RCGIc[1](x,y)+2*RCGId[2](x,y)

   *RCGIc[1](x,y))*RCGId[2](x,y))*RCGIe[2](x,y))*lambda^2+((1+RCGId[2](x,y)

        )*RCGId[2](x,y)+(2*RCGIc[1](x,y)+2*RCGId[2](x,y)*RCGIc[1](x,y)

         )*RCGId[2](x,y)*RCGIe[2](x,y))*lambda*t[3])*t[3])*t[3])*t[3]

                                      ;


            
            cpe := collect ( normevalsubs ( rels, cpe ), lambda, normal );
                        
                        
            # end characteristic polynomial

			if not cleardenom ( cpe / lambda^2, lambda ) then

            	# Gruppe `5_19_ffff_c_e_3`

            	print ( `5_19_ffff_c_e_3` );

            	res := [[5, 19, ffff], [c = 3]];

			else
			
				cpe :=

     lambda^5+((RCGIb[2](x,y)-RCGIc[1](x,y)*RCGIa[1](x,y)-2*RCGIc[1](x,y)

   *RCGIe[3](x,y)-RCGIc[2](x,y)*RCGIc[1](x,y)+RCGId[3](x,y)+2*RCGIc[3](x,y)

        +diff(RCGIc[1](x,y),x))*lambda^4+((-RCGIb[2](x,y)*RCGIc[1](x,y)

    *RCGIa[1](x,y)+RCGIb[1](x,y)*RCGIa[2](x,y)*RCGIc[1](x,y)+RCGIc[1](x,y)

         ^2*RCGIa[3](x,y)+(-RCGIb[2](x,y)*RCGIc[1](x,y)-RCGIb[3](x,y)

         +RCGIc[2](x,y)*RCGIb[1](x,y))*RCGIc[2](x,y)+(2*RCGIb[2](x,y)

    -RCGIc[1](x,y)*RCGIa[1](x,y)+RCGIc[3](x,y))*RCGIc[3](x,y)-RCGIc[4](x,y)

         +(-RCGIc[1](x,y)*RCGIa[1](x,y)-RCGIc[2](x,y)*RCGIc[1](x,y)+2*

         RCGIc[3](x,y))*RCGId[3](x,y)+(2*RCGIc[2](x,y)*RCGIb[1](x,y)-

         RCGIb[3](x,y)-2*RCGId[3](x,y)*RCGIc[1](x,y)-2*RCGIb[2](x,y)*

    RCGIc[1](x,y)+RCGIb[1](x,y)*RCGIe[3](x,y))*RCGIe[3](x,y)+RCGIb[5](x,y)

    -RCGIc[5](x,y)*RCGIc[1](x,y)+(RCGId[3](x,y)+RCGIc[3](x,y)+RCGIb[2](x,y)

       )*diff(RCGIc[1](x,y),x)-RCGIc[1](x,y)*RCGIc[4](x,y)*RCGIe[2](x,y)

   -diff(RCGIe[3](x,y),x)*RCGIb[1](x,y)-diff(RCGIc[3](x,y),x)*RCGIc[1](x,y)

        -diff(RCGIc[2](x,y),x)*RCGIb[1](x,y))*lambda^3+((RCGIb[2](x,y)

   *RCGIc[1](x,y)^2*RCGIa[3](x,y)+RCGIb[1](x,y)*RCGIc[1](x,y)*RCGIa[5](x,y)

   -RCGIb[3](x,y)*RCGIc[1](x,y)^2*RCGIa[2](x,y)+RCGIb[1](x,y)*RCGIa[4](x,y)

    +(RCGIc[1](x,y)*RCGIa[1](x,y)*RCGIb[3](x,y)-RCGIb[1](x,y)*RCGIa[3](x,y)

         *RCGIc[1](x,y))*RCGIc[2](x,y)+(-RCGIb[2](x,y)*RCGIc[1](x,y)*

     RCGIa[1](x,y)-RCGIc[2](x,y)*RCGIb[3](x,y)+RCGIb[1](x,y)*RCGIa[2](x,y)

   *RCGIc[1](x,y)+RCGIb[2](x,y)*RCGIc[3](x,y))*RCGIc[3](x,y)+(RCGIc[2](x,y)

         *RCGIc[1](x,y)-2*RCGIc[3](x,y)+RCGIc[1](x,y)*RCGIa[1](x,y))*

       RCGIc[4](x,y)-diff(RCGIc[5](x,y),x)*RCGIb[1](x,y)+(RCGIc[1](x,y)

         ^2*RCGIa[3](x,y)+(-RCGIc[1](x,y)*RCGIa[1](x,y)+RCGIc[3](x,y)

         )*RCGIc[3](x,y))*RCGId[3](x,y)+(-RCGIb[1](x,y)*RCGIa[3](x,y)

    *RCGIc[1](x,y)+RCGIc[1](x,y)*RCGIa[1](x,y)*RCGIb[3](x,y)+RCGIc[2](x,y)

   *RCGIb[3](x,y)*RCGIc[1](x,y)+(-RCGIb[3](x,y)-RCGIc[2](x,y)*RCGIb[1](x,y)

         )*RCGIc[3](x,y)+2*RCGIc[1](x,y)*RCGIc[4](x,y)+(-RCGIc[3](x,y)

   *RCGIb[1](x,y)+RCGIc[1](x,y)*RCGIb[3](x,y))*RCGIe[3](x,y))*RCGIe[3](x,y)

   -RCGIc[4](x,y)*RCGIe[4](x,y)*RCGIb[1](x,y)+(-RCGIc[2](x,y)*RCGIc[1](x,y)

         +2*RCGIc[3](x,y)-RCGIc[1](x,y)*RCGIa[1](x,y)-2*RCGIc[1](x,y)

         *RCGIe[3](x,y))*RCGIb[5](x,y)+(2*RCGIc[2](x,y)*RCGIb[1](x,y)

   -RCGId[3](x,y)*RCGIc[1](x,y)+3*RCGIb[1](x,y)*RCGIe[3](x,y)-RCGIb[2](x,y)

   *RCGIc[1](x,y)-RCGIb[3](x,y))*RCGIc[5](x,y)+(RCGId[3](x,y)*RCGIc[3](x,y)

    -RCGIb[3](x,y)*RCGIe[3](x,y)+RCGIb[5](x,y)+RCGIb[2](x,y)*RCGIc[3](x,y)

        -RCGIc[4](x,y)-RCGIc[2](x,y)*RCGIb[3](x,y))*diff(RCGIc[1](x,y)

        ,x)+((-RCGIb[2](x,y)*RCGIc[1](x,y)+RCGIc[2](x,y)*RCGIb[1](x,y)

    )*RCGIc[4](x,y)-RCGIc[4](x,y)*RCGId[3](x,y)*RCGIc[1](x,y)+RCGIc[4](x,y)

         *RCGIb[1](x,y)*RCGIe[3](x,y))*RCGIe[2](x,y)+(-RCGIc[3](x,y)*

         RCGIb[1](x,y)+RCGIc[1](x,y)*RCGIb[3](x,y))*diff(RCGIe[3](x,y)

         ,x)+(RCGIc[2](x,y)*RCGIb[1](x,y)-RCGIb[2](x,y)*RCGIc[1](x,y)

-RCGId[3](x,y)*RCGIc[1](x,y)+RCGIb[1](x,y)*RCGIe[3](x,y))*diff(RCGIc[3](x,y\
    )

         ,x)+(-RCGIc[3](x,y)*RCGIb[1](x,y)+RCGIc[1](x,y)*RCGIb[3](x,y)

        )*diff(RCGIc[2](x,y),x))*lambda^2+(-RCGIa[4](x,y)*RCGIb[3](x,y)

   *RCGIc[1](x,y)-RCGIc[1](x,y)^2*RCGIa[5](x,y)*RCGIb[3](x,y)+(RCGIb[1](x,y)

    *RCGIa[4](x,y)+RCGIb[1](x,y)*RCGIc[1](x,y)*RCGIa[5](x,y))*RCGIc[3](x,y)

         +(-RCGIc[1](x,y)^2*RCGIa[3](x,y)+(RCGIc[1](x,y)*RCGIa[1](x,y)

         -RCGIc[3](x,y))*RCGIc[3](x,y))*RCGIc[4](x,y)+(-RCGIc[3](x,y)

        *RCGIb[1](x,y)+RCGIc[1](x,y)*RCGIb[3](x,y))*diff(RCGIc[5](x,y)

         ,x)+(-RCGIc[3](x,y)*RCGIb[1](x,y)+RCGIc[1](x,y)*RCGIb[3](x,y)

         )*RCGIc[4](x,y)*RCGIe[4](x,y)+(RCGIc[1](x,y)^2*RCGIa[3](x,y)

         +(-RCGIc[1](x,y)*RCGIa[1](x,y)+RCGIc[3](x,y))*RCGIc[3](x,y))

   *RCGIb[5](x,y)+(-RCGIc[3](x,y)*RCGIb[3](x,y)+RCGIc[1](x,y)*RCGIc[4](x,y)

    +RCGIc[1](x,y)*RCGIa[1](x,y)*RCGIb[3](x,y)-RCGIb[1](x,y)*RCGIa[3](x,y)

    *RCGIc[1](x,y)-RCGIc[1](x,y)*RCGIb[5](x,y)+RCGIc[5](x,y)*RCGIb[1](x,y)

         )*RCGIc[5](x,y)+(-RCGIc[4](x,y)*RCGIc[3](x,y)-RCGIb[3](x,y)*

         RCGIc[5](x,y)+RCGIb[5](x,y)*RCGIc[3](x,y))*diff(RCGIc[1](x,y)

        ,x)+(RCGIc[4](x,y)^2*RCGIc[1](x,y)+RCGIc[4](x,y)*RCGIb[1](x,y)

    *RCGIc[5](x,y)-RCGIc[4](x,y)*RCGIb[5](x,y)*RCGIc[1](x,y))*RCGIe[2](x,y)

   +(-RCGIc[1](x,y)*RCGIb[5](x,y)+RCGIc[5](x,y)*RCGIb[1](x,y)+RCGIc[1](x,y)

        *RCGIc[4](x,y))*diff(RCGIc[3](x,y),x))*lambda*t[5])*t[5])*t[5])

                                     *t[5]
				
				;
				
				cpe := collect ( normevalsubs ( rels, cpe ), lambda, normal );

				cpe := normal ( cpe/ lambda^2 );

				d31 := discrim ( cpe, lambda );

 				if d31 = 0 then
 
            		# Gruppe `5_18_2_ffff`

            		print ( `5_18_2_ffff` );

            		res := [5, 18, 2, ffff];

				else

            		# Gruppe `5_18_1_ffff`

            		print ( `5_18_1_ffff` );

            		res := [5, 18, 1, ffff];
            	
            	fi;
            	
            fi;

        fi;

    fi;

elif jbtype = [diff(diff(diff(xi,y),y),y), diff(diff(xi,x),y), diff(diff(xi,x),x), diff(eta,y), diff(eta,x)] then 

    cond := [-RCGId[1](x,y) = 0, 1-RCGId[2](x,y) = 0]; 

    l1bed := normevalsubs ( rels, cond ) ;

    l1bed := evalb ( convert ( l1bed, `and` ));

    if not l1bed then

        cond2 := [RCGId[1](x,y)^2-4*RCGIe[1](x,y) <> 0, (-1-RCGId[2](x,y))^2 <> 0, -1-RCGId[2](x,y) = 0, RCGIe[2](x,y) = 0, -RCGId[1](x,y)*RCGIe[2](x,y)-(-1-RCGId[2](x,y))*RCGIe[1](x,y) = 0]; 

        cond3 := [false]; 

        cond21 := [false]; 

        cond22 := [-1-RCGId[2](x,y) = 0, RCGIe[2](x,y) = 0, RCGId[1](x,y)^2-4*RCGIe[1](x,y) <> 0]; 

        lbed2 := normevalsubs ( rels, cond2 );

        lbed21 := normevalsubs ( rels, cond21 );

        lbed22 := normevalsubs ( rels, cond22 );

        lbed2 := evalb ( convert ( lbed2, `and` ) );

        lbed21 := evalb ( convert ( lbed21, `and` ) );

        lbed22 := evalb ( convert ( lbed22, `and` ) );

        lbed2 := evalb ( lbed2 or lbed21 or lbed22 );

        lbed3 := normevalsubs ( rels, cond3 );

        lbed3 := evalb ( convert ( lbed3, `and` ) );

        lbed1 := evalb ( not (lbed2 or lbed3) );

        if lbed1 then

            # need characteristic polynomial to distinguish cases

			cpe :=
			
			         lambda^5+((2*RCGId[2](x,y)+3)*lambda^4+((3+(3-RCGId[2](x,y))*

        RCGId[2](x,y))*lambda^3+((1+(-4-2*RCGId[2](x,y))*RCGId[2](x,y)

      ^2)*lambda^2+(-1+(-3-2*RCGId[2](x,y))*RCGId[2](x,y))*RCGId[2](x,y)

                        *lambda*t[3])*t[3])*t[3])*t[3]

             ;                    



			cpe := collect ( normevalsubs ( rels, cpe ), lambda, normal );

           
            # end characteristic polynomial

			if not cleardenom ( cpe / lambda^2, lambda ) then

            	# Gruppe `5_19_tfff_c_e_3`

            	print ( `5_19_tfff_c_e_3` );

            	res := [[5, 19, tfff], [c = 3]];

			else


				cpe :=

       lambda^5+((3*RCGId[3](x,y)+RCGIb[2](x,y)+RCGIa[1](x,y))*lambda^4+

         ((RCGIa[2](x,y)+RCGIa[1](x,y)*RCGId[3](x,y)+RCGId[3](x,y)^2+

     diff(RCGId[3](x,y),y)+(-RCGId[2](x,y)-3)*RCGIb[3](x,y)+(RCGIa[1](x,y)

   +3*RCGId[3](x,y))*RCGIb[2](x,y))*lambda^3+((-RCGIa[3](x,y)*RCGIe[3](x,y)

         +(-RCGIa[1](x,y)-RCGId[3](x,y))*RCGIb[3](x,y)+(RCGId[3](x,y)

      ^2+diff(RCGId[3](x,y),y)+RCGIa[1](x,y)*RCGId[3](x,y)+RCGIa[2](x,y)

        +(-RCGId[2](x,y)-2)*RCGIb[3](x,y))*RCGIb[2](x,y)-RCGIb[1](x,y)

         *RCGIa[3](x,y)-diff(RCGIb[3](x,y),y)+RCGIa[5](x,y))*lambda^2+

         (RCGIa[3](x,y)*RCGIc[3](x,y)-RCGIa[3](x,y)*RCGIb[4](x,y)+((-

    RCGIa[1](x,y)-RCGId[3](x,y))*RCGIb[3](x,y)+RCGIb[2](x,y)*RCGIb[3](x,y)

       )*RCGIb[2](x,y)-diff(RCGIb[3](x,y),y)*RCGIb[2](x,y)+RCGIa[5](x,y)

                 *RCGIb[2](x,y))*lambda*t[5])*t[5])*t[5])*t[5]


				;

				cpe := collect ( normevalsubs ( rels, cpe), lambda, normal );

				cpe := normal ( cpe/ lambda^2 );

				d31 := discrim ( cpe, lambda );

 				if d31 = 0 then
 
            		# Gruppe `5_18_2_tfff`

            		print ( `5_18_2_tfff` );

            		res := [5, 18, 2, tfff];

				else

            		# Gruppe `5_18_1_tfff`

            		print ( `5_18_1_tfff` );

            		res := [5, 18, 1, tfff];
            	
            	fi;
            	
            fi;

#####################

		fi;

	fi;
	
fi;

remcotes ( fss );

RETURN ( res );

end;


restoredep ();

